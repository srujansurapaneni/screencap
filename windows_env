OS and Environment settings:
----------------------------
- install chrome
- install visual studio build tools - (BuildTools_Full)
- install visuall C++ 2015 tools and sdk
- install visual studio 2015 (https://go.microsoft.com/fwlink/?LinkId=532606&clcid=0x409)
- CUDA - latest if using GPU (https://developer.nvidia.com/cuda-downloads)
- install cuDNN (https://developer.nvidia.com/cudnn)
The following steps describe how to build a cuDNN dependent program. In the following sections:
your CUDA directory path is referred to as C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0
your cuDNN directory path is referred to as <installpath>
Navigate to your <installpath> directory containing cuDNN.
Unzip the cuDNN package.
cudnn-9.0-windows7-x64-v7.zip
or
cudnn-9.0-windows10-x64-v7.zip
Copy the following files into the CUDA Toolkit directory.
Copy <installpath>\cuda\bin\cudnn64_7.dll to C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin.
Copy <installpath>\cuda\ include\cudnn.h to C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\include.
Copy <installpath>\cuda\lib\x64\cudnn.lib to C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\lib\x64.
Set the following environment variables to point to where cuDNN is located. To access the value of the $(CUDA_PATH) environment variable, perform the following steps:
Open a command prompt from the Start menu.
Type Run and hit Enter.
Issue the control sysdm.cpl command.
Select the Advanced tab at the top of the window.
Click Environment Variables at the bottom of the window.
Ensure the following values are set:
Variable Name: CUDA_PATH 
Variable Value: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0
Include cudnn.lib in your Visual Studio project.
Open the Visual Studio project and right-click on the project name.
Click Linker > Input > Additional Dependencies.
Add cudnn.lib and click OK.

- download and unzip Opencv_3x(https://sourceforge.net/projects/opencvlibrary/files/opencv-win/3.2.0/opencv-3.2.0-vc14.exe/download) 
- make sure opencv is in C: directly
- (make sure the paths are as follows: C:\opencv_3.0\opencv\build\include & C:\opencv_3.0\opencv\build\x64\vc14\lib)
- add Windows system variable cudnn with path to CUDNN: https://hsto.org/files/a49/3dc/fc4/a493dcfc4bd34a1295fd15e0e2e01f26.jpg
- download Darknet and unzip (https://github.com/AlexeyAB/darknet.git)
- open build\darknet\darknet.vcxproj by using Notepad, find 2 places with "CUDA 8.0" and change it to your CUDA-version
- Open visual studio and open the darknet_no_gpu.sln. 
- For with GPU, open the darknet.sln file instead. 
- open \darknet.sln -> (right click on project) -> properties -> C/C++ -> Preprocessor -> Preprocessor Definitions, and add at the 
  beginning of line: CUDNN;
- Right click on darknet.sln and change the configuration to "Release" and "x64" and build.
- Once build is done, Find files opencv_world320.dll and opencv_ffmpeg320_64.dll in C:\opencv_3.0\opencv\build\x64\vc14\bin 
  and put it near with darknet.exe

  
Data and cfg settings before training:
--------------------------------------

- create, obj.data, obj.names and yolo-obj.cfg (.cfg from yolo.obj_2.0.cfg)
- Edit obj.data and obj.names accordingly. Inside the .cfg file, edit the batch, subdivisions, classes, and filters 
  (use formula for filters - filters=(classes + 5)*5)
- on the actual machine, download bboxtool and label images and convert it to the required format. So there should be one .jpg and 
  .txt file with the same names
- move obj.names, obj.data to build\darknet\x64\data\
- create folder obj to build\darknet\x64\data\
- move all the .jpgs and .txts to the above created obj folder
- create a train.txt and test.txt files with the image names and extensions and move it to build\darknet\x64\data\
- create the .txts for multiple objects like below
  For example for img1.jpg you should create img1.txt containing:

  1 0.716797 0.395833 0.216406 0.147222
  0 0.687109 0.379167 0.255469 0.158333
  1 0.420312 0.395833 0.140625 0.166667
- make sure the yolo-obj.cfg is in C:\darknet\build\darknet\x64
- All the .jpg's and .txt files should be in one folder and name it 001 for one single object
- If there are more than one object, there must be one folder for each and numbering should be 002 etc and all the .jpgs and .txt files
  should be in it. The train.txt and test.txt should be modified accordingly
- Download darknet19_448.conv.23 from https://pjreddie.com/media/files/darknet19_448.conv.23 and put it in C:\darknet\build\darknet\x64

Training and Testing:
---------------------
- For training, run the below command. Change the .exe file name based on with GPU or NO GPU build you have done above
  darknet.exe detector train data/obj.data yolo-obj.cfg darknet19_448.conv.23
  darknet_no_gpu.exe detector train data/obj.data yolo-obj.cfg darknet19_448.conv.23
- For testing, run the below
  darknet.exe detector test data/obj.data yolo-obj.cfg backup/yolo-obj_200.weights data/obj/pos-293.jpg

